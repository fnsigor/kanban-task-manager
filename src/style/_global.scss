// ====================ARQUIVO PARA FUNÇÕES SASS E CONFIGURAÇÕES GLOBAIS


$dark-bg: #21212d;
$component-gray: #2c2c38;
$text-gray: #888fa0;
$purple: #645fc6;
$text-color: #fff;
$transparent-bg: #0000004b;
$gray-border-color: #444;
$red: #E71D36;
$green: #7BD389;

* {
    margin: 0;
    padding: 0;
    list-style: none;
    box-sizing: border-box;
    text-decoration: none;
    border: none;
    background: none;
}



@mixin useFlex($direction: row) {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
}

@mixin useCreateButton($theme) {

    text-shadow: 0 0 2px 0.5px;

    @if $theme ==white {
        background-color: #fff;
        border-radius: 5px;
        padding: 1rem 1.5rem;
        color: #000;
        cursor: pointer;

        &:hover {
            background: darken(#FFF, 20%);
        }
    }

    @else if $theme ==purple {
        background-color: $purple;
        border-radius: 5px;
        padding: 1rem 1.5rem;
        color: $text-color;
        cursor: pointer;

        &:hover {
            background: darken($purple, 20%);
        }

        &[disabled] {
            background: darken($purple, 20%);
        }
    }

    @else if $theme ==red {
        background-color: darken($red, 30%);
        border-radius: 5px;
        padding: 1rem 1.5rem;
        color: $text-color;
        cursor: pointer;

        &:hover {
            background-color: $red;
        }
    }

    @else {
        background-color: $green;
        border-radius: 5px;
        padding: 1rem 1.5rem;
        color: $text-color;
        cursor: pointer;
    }
}


.whiteButton {
    @include useCreateButton(white);
}

.large {
    width: 100%;
}

.purpleButton {
    @include useCreateButton(purple);
}

.redButton {
    @include useCreateButton(red);
}



.shadow {
    width: 100vw;
    height: 100vh;
    position: absolute;
    background-color: #00000073;
    display: none;
}

.show {
    display: block;
}

img[src="./icon-close.svg"] {

    height: 35px;
    width: auto;
    object-fit: cover;
    cursor: pointer;


    &:hover {
        filter: drop-shadow(0 0 3px $red);
    }

}






#app {
    background-color: $dark-bg;
    min-height: 100vh;
    color: $text-color;

    display: flex;
}


.outletNavbarContainer {

    width: calc(100% - 25rem);
    display: flex;
    flex-direction: column;

}



#currentBoard {

    height: calc(100vh - 7rem);

    overflow-x: scroll;
    padding: 4rem;
    display: flex;

    gap: 5rem;


    &::-webkit-scrollbar {
        height: 15px;
    }

    &::-webkit-scrollbar-track {
        background: #000000a5;
    }

    /* Handle */
    &::-webkit-scrollbar-thumb {
        background: $purple;
        border-radius: 3px;
    }


    &::-webkit-scrollbar-thumb:hover {
        background: darken($purple, 20%);
    }


    .createColumnInput {

        height: fit-content;
        background-color: $transparent-bg;
        border-radius: 5px;
        width: 30rem;
        flex-shrink: 0;

        form {

            width: 100%;


            @include useFlex(column);
            align-items: start;
            padding: 1rem 1rem;
            gap: 1rem;
        }


        input {
            width: 100%;
            outline: none;
            color: #fff;
        }

        button {
            display: none;
        }
    }
}




.taskColumn {
    flex-shrink: 0;

    background-color: $transparent-bg;

    height: fit-content;

    width: 30rem;
    padding: 2rem;
    overflow-y: auto;

    border-radius: 5px;

    &::-webkit-scrollbar {
        width: 10px;
    }

    &::-webkit-scrollbar-track {
        background: #00000081;
    }

    /* Handle */
    &::-webkit-scrollbar-thumb {
        background: $purple;
        border-radius: 3px;
    }


    &::-webkit-scrollbar-thumb:hover {
        background: darken($purple, 20%);
    }



    .taskList {
        @include useFlex(column);
        gap: 1.5rem;
    }


    .addTaskLi {
        width: 100%;
        @include useFlex(column);
        align-items: start;
    }


    .addTaskLi input {
        width: 100%;
        padding: .5rem 1rem;
        margin-bottom: 1rem;
        outline: none;
        border-radius: 5px;
        color: #fff;
    }

    .addTaskLi input:focus {
        background-color: $component-gray;

    }

}


.taskContainer {
    background-color: $component-gray;
    border-radius: 5px;
    padding: 1.5rem 1rem;
    width: 100%;


    &:hover {
        background-color: lighten($color: $component-gray, $amount: 5%);
    }
}





#navbar {
    height: 7rem;

    @include useFlex;
    justify-content: flex-start;
    padding-left: 2rem;

    background-color: $component-gray;

    border-bottom: 2px solid $gray-border-color;
}






#sidebar {
    background: $component-gray;

    padding-top: 2rem;
    width: 25rem;

    border-right: 2px solid $gray-border-color;

    &>* {

        color: $text-gray;
    }


    div:first-child {

        @include useFlex();
        justify-content: flex-start;


        margin-bottom: 3rem;
        text-transform: uppercase;
        padding-left: 2rem;

        svg {
            margin-right: 5px;
            color: $purple;
        }
    }

    p {
        margin-bottom: 2rem;
        padding-left: 2rem;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-weight: 500;
    }

    ul {

        @include useFlex(column);
        align-items: start;
        gap: 1rem;
        margin-bottom: 2rem;

    }

    li {
        width: 85%;
    }

    li a {
        width: 100%;
        padding-block: 1rem;
        padding-right: 1rem;
        border-top-right-radius: 20px;
        border-bottom-right-radius: 20px;
        color: #fff;
        padding-left: 2rem;

        @include useFlex;
        justify-content: flex-start;


        svg {
            margin-right: 5px;
            width: 24px;
            height: 24px;
        }

        &:hover {
            background-color: $purple;
            color: $text-color;
            cursor: pointer;
        }

    }


    .sidebarOptions {
        width: 85%;
        margin-left: 2rem;
    }

    .sidebarOptions button:nth-child(1) {
        margin-bottom: 2rem;
    }






}






.popupForm {

    border-radius: 5px;

    width: 500px;

    max-height: 90%;
    overflow-y: auto;

    padding: 3.5rem;

    position: relative;

    background-color: $component-gray;


    &::-webkit-scrollbar {
        width: 10px;
    }

    &::-webkit-scrollbar-track {
        background: #00000073;
    }

    /* Handle */
    &::-webkit-scrollbar-thumb {
        background: $purple;
        border-radius: 3px;
    }


    &::-webkit-scrollbar-thumb:hover {
        background: darken($purple, 20%);
    }



    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    .closePopup {
        position: absolute;
        top: 3.5rem;
        right: 3.5rem;
        font-size: 1.4rem;
        width: 45px;
        height: 45px;
        transform: translateY(-26%);
        cursor: pointer;

        &:hover {
            filter: drop-shadow(0 0 3px $red);
        }
    }

    h4,
    form>div,
    form>button:nth-of-type(1) {
        margin-bottom: 3rem;
    }

    h4 {
        font-size: 2.5rem;
        font-weight: 500;
    }

    form>div {
        @include useFlex(column);
        align-items: start;
    }

    label,
    input,
    textarea {
        font-weight: 400;
    }

    label {
        align-items: start;
        margin-bottom: .5rem;
        font-size: 1.8rem;
    }

    input,
    textarea,
    select {
        font-size: 1.6rem;
        border: 2px solid $gray-border-color;
        border-radius: 5px;
        padding: .4rem .5rem;
        color: #fff;
        width: 100%;
    }

    input:focus,
    textarea:focus {
        outline: 2px solid lighten($purple, 10%);
    }

    textarea {
        resize: none;
        height: 15rem
    }

    .inputAndDeleteContainer {
        @include useFlex(column);
        gap: 1rem;
        align-items: start;
    }

    .inputAndDeleteContainer>div {
        width: 100%
    }

    .boardColumns {
        width: 100%;
    }

    .inputAndDeleteDiv {
        width: 100%;
        @include useFlex(row);
        gap: 1rem;
    }


    option {
        background-color: $component-gray;
    }


}




.popupForm.EditTask {


    .taskName,
    .taskDescription {
        border: initial;
        border-radius: 0;
        outline: none;
        border-bottom: 1px solid #00000000;


        &:focus {
            border-bottom: 1px solid $gray-border-color;
        }
    }

    .taskName {
        font-size: 2.5rem;
        font-weight: 500;
    }

    .taskDescription {
        font-size: 1.8rem;
        font-weight: 400;
    }

    input[type='checkbox']:checked+label {
        text-decoration: line-through;
        color: darken(#fff, 50%);
    }

    input[type='checkbox'] {
        height: 25px;
        width: 25px;
        outline: none;
        cursor: pointer;
        margin-right: 5px;
    }

    .subtasksContainer div:not(.subtasksContainer div:last-child) {
        margin-bottom: 1rem
    }


    .subtasksDiv {
        @include useFlex;
        justify-content: flex-end;
        width: 100%;
        background-color: $dark-bg;
        border-radius: 5px;
        padding: 1rem .5rem;
    }

    .subtasksDiv label {
        width: 80%;
        font-size: 1.6rem;
    }

    .subtasksDiv img,
    input[type='checkbox'] {
        width: 10%;
    }

    .subtasksDiv img {
        height: 28px;
    }



}